/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MAPResServer { 
public partial class MAPResService {
  public interface ISync {
    void setProjectProfileWithStandardAminoAcids(string AnalysisTitle, string AnalystName, int PeptideWindowSize, THashSet<string> ModificationSites, string path);
    void setProjectProfileWithPseudoAminoAcids(string AnalysisTitle, string AnalystName, int PeptideWindowSize, THashSet<string> ModificationSites, THashSet<string> ListOfPseudoAminoAcids, string path);
    void SaveProject();
    void openProjectLocation(string location);
    void runPreferenceEstimationProcess();
    void runAssociationRuleMiningProcess();
    List<string> getPrimaryDataset();
    List<string> getProteinsDataset();
    List<string> getPeptidesDataset();
    List<string> getSitesDataset();
    string getObservedFrequency(string ModSite);
    string getObservedFrequencyAsPerc(string ModSite);
    string getObservedCount(string ModSite);
    string getExpectedCount(string ModSite);
    string getExpectedFrequency(string ModSite);
    string getExpectedFrequencyAsPerc(string ModSite);
    string getDOEC(string ModSite);
    string getSigma(string ModSite);
    string getDeviationParameter(string ModSite);
    List<string> getPreferredSitesMatrix();
    List<string> getSignificantlyPreferredSitesMatrix();
    List<string> getSignificantlyPreferredSites_Positive_Negative_Both();
    List<string> getAminoAcidsandPreferredPositions();
    List<string> getAssociationRules();
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_setProjectProfileWithStandardAminoAcids(AsyncCallback callback, object state, string AnalysisTitle, string AnalystName, int PeptideWindowSize, THashSet<string> ModificationSites, string path);
    void End_setProjectProfileWithStandardAminoAcids(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setProjectProfileWithPseudoAminoAcids(AsyncCallback callback, object state, string AnalysisTitle, string AnalystName, int PeptideWindowSize, THashSet<string> ModificationSites, THashSet<string> ListOfPseudoAminoAcids, string path);
    void End_setProjectProfileWithPseudoAminoAcids(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_SaveProject(AsyncCallback callback, object state);
    void End_SaveProject(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_openProjectLocation(AsyncCallback callback, object state, string location);
    void End_openProjectLocation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_runPreferenceEstimationProcess(AsyncCallback callback, object state);
    void End_runPreferenceEstimationProcess(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_runAssociationRuleMiningProcess(AsyncCallback callback, object state);
    void End_runAssociationRuleMiningProcess(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPrimaryDataset(AsyncCallback callback, object state);
    List<string> End_getPrimaryDataset(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getProteinsDataset(AsyncCallback callback, object state);
    List<string> End_getProteinsDataset(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPeptidesDataset(AsyncCallback callback, object state);
    List<string> End_getPeptidesDataset(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSitesDataset(AsyncCallback callback, object state);
    List<string> End_getSitesDataset(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getObservedFrequency(AsyncCallback callback, object state, string ModSite);
    string End_getObservedFrequency(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getObservedFrequencyAsPerc(AsyncCallback callback, object state, string ModSite);
    string End_getObservedFrequencyAsPerc(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getObservedCount(AsyncCallback callback, object state, string ModSite);
    string End_getObservedCount(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getExpectedCount(AsyncCallback callback, object state, string ModSite);
    string End_getExpectedCount(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getExpectedFrequency(AsyncCallback callback, object state, string ModSite);
    string End_getExpectedFrequency(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getExpectedFrequencyAsPerc(AsyncCallback callback, object state, string ModSite);
    string End_getExpectedFrequencyAsPerc(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getDOEC(AsyncCallback callback, object state, string ModSite);
    string End_getDOEC(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSigma(AsyncCallback callback, object state, string ModSite);
    string End_getSigma(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getDeviationParameter(AsyncCallback callback, object state, string ModSite);
    string End_getDeviationParameter(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPreferredSitesMatrix(AsyncCallback callback, object state);
    List<string> End_getPreferredSitesMatrix(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSignificantlyPreferredSitesMatrix(AsyncCallback callback, object state);
    List<string> End_getSignificantlyPreferredSitesMatrix(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSignificantlyPreferredSites_Positive_Negative_Both(AsyncCallback callback, object state);
    List<string> End_getSignificantlyPreferredSites_Positive_Negative_Both(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getAminoAcidsandPreferredPositions(AsyncCallback callback, object state);
    List<string> End_getAminoAcidsandPreferredPositions(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getAssociationRules(AsyncCallback callback, object state);
    List<string> End_getAssociationRules(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setProjectProfileWithStandardAminoAcids(AsyncCallback callback, object state, string AnalysisTitle, string AnalystName, int PeptideWindowSize, THashSet<string> ModificationSites, string path)
    {
      return send_setProjectProfileWithStandardAminoAcids(callback, state, AnalysisTitle, AnalystName, PeptideWindowSize, ModificationSites, path);
    }

    public void End_setProjectProfileWithStandardAminoAcids(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_setProjectProfileWithStandardAminoAcids();
    }

    #endif

    public void setProjectProfileWithStandardAminoAcids(string AnalysisTitle, string AnalystName, int PeptideWindowSize, THashSet<string> ModificationSites, string path)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setProjectProfileWithStandardAminoAcids(null, null, AnalysisTitle, AnalystName, PeptideWindowSize, ModificationSites, path);
      End_setProjectProfileWithStandardAminoAcids(asyncResult);

      #else
      send_setProjectProfileWithStandardAminoAcids(AnalysisTitle, AnalystName, PeptideWindowSize, ModificationSites, path);
      recv_setProjectProfileWithStandardAminoAcids();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setProjectProfileWithStandardAminoAcids(AsyncCallback callback, object state, string AnalysisTitle, string AnalystName, int PeptideWindowSize, THashSet<string> ModificationSites, string path)
    {
      oprot_.WriteMessageBegin(new TMessage("setProjectProfileWithStandardAminoAcids", TMessageType.Call, seqid_));
      setProjectProfileWithStandardAminoAcids_args args = new setProjectProfileWithStandardAminoAcids_args();
      args.AnalysisTitle = AnalysisTitle;
      args.AnalystName = AnalystName;
      args.PeptideWindowSize = PeptideWindowSize;
      args.ModificationSites = ModificationSites;
      args.Path = path;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setProjectProfileWithStandardAminoAcids(string AnalysisTitle, string AnalystName, int PeptideWindowSize, THashSet<string> ModificationSites, string path)
    {
      oprot_.WriteMessageBegin(new TMessage("setProjectProfileWithStandardAminoAcids", TMessageType.Call, seqid_));
      setProjectProfileWithStandardAminoAcids_args args = new setProjectProfileWithStandardAminoAcids_args();
      args.AnalysisTitle = AnalysisTitle;
      args.AnalystName = AnalystName;
      args.PeptideWindowSize = PeptideWindowSize;
      args.ModificationSites = ModificationSites;
      args.Path = path;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_setProjectProfileWithStandardAminoAcids()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setProjectProfileWithStandardAminoAcids_result result = new setProjectProfileWithStandardAminoAcids_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setProjectProfileWithPseudoAminoAcids(AsyncCallback callback, object state, string AnalysisTitle, string AnalystName, int PeptideWindowSize, THashSet<string> ModificationSites, THashSet<string> ListOfPseudoAminoAcids, string path)
    {
      return send_setProjectProfileWithPseudoAminoAcids(callback, state, AnalysisTitle, AnalystName, PeptideWindowSize, ModificationSites, ListOfPseudoAminoAcids, path);
    }

    public void End_setProjectProfileWithPseudoAminoAcids(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_setProjectProfileWithPseudoAminoAcids();
    }

    #endif

    public void setProjectProfileWithPseudoAminoAcids(string AnalysisTitle, string AnalystName, int PeptideWindowSize, THashSet<string> ModificationSites, THashSet<string> ListOfPseudoAminoAcids, string path)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setProjectProfileWithPseudoAminoAcids(null, null, AnalysisTitle, AnalystName, PeptideWindowSize, ModificationSites, ListOfPseudoAminoAcids, path);
      End_setProjectProfileWithPseudoAminoAcids(asyncResult);

      #else
      send_setProjectProfileWithPseudoAminoAcids(AnalysisTitle, AnalystName, PeptideWindowSize, ModificationSites, ListOfPseudoAminoAcids, path);
      recv_setProjectProfileWithPseudoAminoAcids();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setProjectProfileWithPseudoAminoAcids(AsyncCallback callback, object state, string AnalysisTitle, string AnalystName, int PeptideWindowSize, THashSet<string> ModificationSites, THashSet<string> ListOfPseudoAminoAcids, string path)
    {
      oprot_.WriteMessageBegin(new TMessage("setProjectProfileWithPseudoAminoAcids", TMessageType.Call, seqid_));
      setProjectProfileWithPseudoAminoAcids_args args = new setProjectProfileWithPseudoAminoAcids_args();
      args.AnalysisTitle = AnalysisTitle;
      args.AnalystName = AnalystName;
      args.PeptideWindowSize = PeptideWindowSize;
      args.ModificationSites = ModificationSites;
      args.ListOfPseudoAminoAcids = ListOfPseudoAminoAcids;
      args.Path = path;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setProjectProfileWithPseudoAminoAcids(string AnalysisTitle, string AnalystName, int PeptideWindowSize, THashSet<string> ModificationSites, THashSet<string> ListOfPseudoAminoAcids, string path)
    {
      oprot_.WriteMessageBegin(new TMessage("setProjectProfileWithPseudoAminoAcids", TMessageType.Call, seqid_));
      setProjectProfileWithPseudoAminoAcids_args args = new setProjectProfileWithPseudoAminoAcids_args();
      args.AnalysisTitle = AnalysisTitle;
      args.AnalystName = AnalystName;
      args.PeptideWindowSize = PeptideWindowSize;
      args.ModificationSites = ModificationSites;
      args.ListOfPseudoAminoAcids = ListOfPseudoAminoAcids;
      args.Path = path;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_setProjectProfileWithPseudoAminoAcids()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setProjectProfileWithPseudoAminoAcids_result result = new setProjectProfileWithPseudoAminoAcids_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_SaveProject(AsyncCallback callback, object state)
    {
      return send_SaveProject(callback, state);
    }

    public void End_SaveProject(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_SaveProject();
    }

    #endif

    public void SaveProject()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_SaveProject(null, null);
      End_SaveProject(asyncResult);

      #else
      send_SaveProject();
      recv_SaveProject();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_SaveProject(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("SaveProject", TMessageType.Call, seqid_));
      SaveProject_args args = new SaveProject_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_SaveProject()
    {
      oprot_.WriteMessageBegin(new TMessage("SaveProject", TMessageType.Call, seqid_));
      SaveProject_args args = new SaveProject_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_SaveProject()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      SaveProject_result result = new SaveProject_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_openProjectLocation(AsyncCallback callback, object state, string location)
    {
      return send_openProjectLocation(callback, state, location);
    }

    public void End_openProjectLocation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_openProjectLocation();
    }

    #endif

    public void openProjectLocation(string location)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_openProjectLocation(null, null, location);
      End_openProjectLocation(asyncResult);

      #else
      send_openProjectLocation(location);
      recv_openProjectLocation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_openProjectLocation(AsyncCallback callback, object state, string location)
    {
      oprot_.WriteMessageBegin(new TMessage("openProjectLocation", TMessageType.Call, seqid_));
      openProjectLocation_args args = new openProjectLocation_args();
      args.Location = location;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_openProjectLocation(string location)
    {
      oprot_.WriteMessageBegin(new TMessage("openProjectLocation", TMessageType.Call, seqid_));
      openProjectLocation_args args = new openProjectLocation_args();
      args.Location = location;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_openProjectLocation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      openProjectLocation_result result = new openProjectLocation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_runPreferenceEstimationProcess(AsyncCallback callback, object state)
    {
      return send_runPreferenceEstimationProcess(callback, state);
    }

    public void End_runPreferenceEstimationProcess(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_runPreferenceEstimationProcess();
    }

    #endif

    public void runPreferenceEstimationProcess()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_runPreferenceEstimationProcess(null, null);
      End_runPreferenceEstimationProcess(asyncResult);

      #else
      send_runPreferenceEstimationProcess();
      recv_runPreferenceEstimationProcess();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_runPreferenceEstimationProcess(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("runPreferenceEstimationProcess", TMessageType.Call, seqid_));
      runPreferenceEstimationProcess_args args = new runPreferenceEstimationProcess_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_runPreferenceEstimationProcess()
    {
      oprot_.WriteMessageBegin(new TMessage("runPreferenceEstimationProcess", TMessageType.Call, seqid_));
      runPreferenceEstimationProcess_args args = new runPreferenceEstimationProcess_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_runPreferenceEstimationProcess()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      runPreferenceEstimationProcess_result result = new runPreferenceEstimationProcess_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_runAssociationRuleMiningProcess(AsyncCallback callback, object state)
    {
      return send_runAssociationRuleMiningProcess(callback, state);
    }

    public void End_runAssociationRuleMiningProcess(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_runAssociationRuleMiningProcess();
    }

    #endif

    public void runAssociationRuleMiningProcess()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_runAssociationRuleMiningProcess(null, null);
      End_runAssociationRuleMiningProcess(asyncResult);

      #else
      send_runAssociationRuleMiningProcess();
      recv_runAssociationRuleMiningProcess();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_runAssociationRuleMiningProcess(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("runAssociationRuleMiningProcess", TMessageType.Call, seqid_));
      runAssociationRuleMiningProcess_args args = new runAssociationRuleMiningProcess_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_runAssociationRuleMiningProcess()
    {
      oprot_.WriteMessageBegin(new TMessage("runAssociationRuleMiningProcess", TMessageType.Call, seqid_));
      runAssociationRuleMiningProcess_args args = new runAssociationRuleMiningProcess_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_runAssociationRuleMiningProcess()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      runAssociationRuleMiningProcess_result result = new runAssociationRuleMiningProcess_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPrimaryDataset(AsyncCallback callback, object state)
    {
      return send_getPrimaryDataset(callback, state);
    }

    public List<string> End_getPrimaryDataset(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPrimaryDataset();
    }

    #endif

    public List<string> getPrimaryDataset()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPrimaryDataset(null, null);
      return End_getPrimaryDataset(asyncResult);

      #else
      send_getPrimaryDataset();
      return recv_getPrimaryDataset();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPrimaryDataset(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getPrimaryDataset", TMessageType.Call, seqid_));
      getPrimaryDataset_args args = new getPrimaryDataset_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPrimaryDataset()
    {
      oprot_.WriteMessageBegin(new TMessage("getPrimaryDataset", TMessageType.Call, seqid_));
      getPrimaryDataset_args args = new getPrimaryDataset_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getPrimaryDataset()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPrimaryDataset_result result = new getPrimaryDataset_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPrimaryDataset failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getProteinsDataset(AsyncCallback callback, object state)
    {
      return send_getProteinsDataset(callback, state);
    }

    public List<string> End_getProteinsDataset(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getProteinsDataset();
    }

    #endif

    public List<string> getProteinsDataset()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getProteinsDataset(null, null);
      return End_getProteinsDataset(asyncResult);

      #else
      send_getProteinsDataset();
      return recv_getProteinsDataset();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getProteinsDataset(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getProteinsDataset", TMessageType.Call, seqid_));
      getProteinsDataset_args args = new getProteinsDataset_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getProteinsDataset()
    {
      oprot_.WriteMessageBegin(new TMessage("getProteinsDataset", TMessageType.Call, seqid_));
      getProteinsDataset_args args = new getProteinsDataset_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getProteinsDataset()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getProteinsDataset_result result = new getProteinsDataset_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProteinsDataset failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPeptidesDataset(AsyncCallback callback, object state)
    {
      return send_getPeptidesDataset(callback, state);
    }

    public List<string> End_getPeptidesDataset(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPeptidesDataset();
    }

    #endif

    public List<string> getPeptidesDataset()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPeptidesDataset(null, null);
      return End_getPeptidesDataset(asyncResult);

      #else
      send_getPeptidesDataset();
      return recv_getPeptidesDataset();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPeptidesDataset(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getPeptidesDataset", TMessageType.Call, seqid_));
      getPeptidesDataset_args args = new getPeptidesDataset_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPeptidesDataset()
    {
      oprot_.WriteMessageBegin(new TMessage("getPeptidesDataset", TMessageType.Call, seqid_));
      getPeptidesDataset_args args = new getPeptidesDataset_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getPeptidesDataset()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPeptidesDataset_result result = new getPeptidesDataset_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPeptidesDataset failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSitesDataset(AsyncCallback callback, object state)
    {
      return send_getSitesDataset(callback, state);
    }

    public List<string> End_getSitesDataset(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSitesDataset();
    }

    #endif

    public List<string> getSitesDataset()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSitesDataset(null, null);
      return End_getSitesDataset(asyncResult);

      #else
      send_getSitesDataset();
      return recv_getSitesDataset();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSitesDataset(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getSitesDataset", TMessageType.Call, seqid_));
      getSitesDataset_args args = new getSitesDataset_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSitesDataset()
    {
      oprot_.WriteMessageBegin(new TMessage("getSitesDataset", TMessageType.Call, seqid_));
      getSitesDataset_args args = new getSitesDataset_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getSitesDataset()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSitesDataset_result result = new getSitesDataset_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSitesDataset failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getObservedFrequency(AsyncCallback callback, object state, string ModSite)
    {
      return send_getObservedFrequency(callback, state, ModSite);
    }

    public string End_getObservedFrequency(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getObservedFrequency();
    }

    #endif

    public string getObservedFrequency(string ModSite)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getObservedFrequency(null, null, ModSite);
      return End_getObservedFrequency(asyncResult);

      #else
      send_getObservedFrequency(ModSite);
      return recv_getObservedFrequency();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getObservedFrequency(AsyncCallback callback, object state, string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getObservedFrequency", TMessageType.Call, seqid_));
      getObservedFrequency_args args = new getObservedFrequency_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getObservedFrequency(string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getObservedFrequency", TMessageType.Call, seqid_));
      getObservedFrequency_args args = new getObservedFrequency_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getObservedFrequency()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getObservedFrequency_result result = new getObservedFrequency_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getObservedFrequency failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getObservedFrequencyAsPerc(AsyncCallback callback, object state, string ModSite)
    {
      return send_getObservedFrequencyAsPerc(callback, state, ModSite);
    }

    public string End_getObservedFrequencyAsPerc(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getObservedFrequencyAsPerc();
    }

    #endif

    public string getObservedFrequencyAsPerc(string ModSite)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getObservedFrequencyAsPerc(null, null, ModSite);
      return End_getObservedFrequencyAsPerc(asyncResult);

      #else
      send_getObservedFrequencyAsPerc(ModSite);
      return recv_getObservedFrequencyAsPerc();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getObservedFrequencyAsPerc(AsyncCallback callback, object state, string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getObservedFrequencyAsPerc", TMessageType.Call, seqid_));
      getObservedFrequencyAsPerc_args args = new getObservedFrequencyAsPerc_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getObservedFrequencyAsPerc(string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getObservedFrequencyAsPerc", TMessageType.Call, seqid_));
      getObservedFrequencyAsPerc_args args = new getObservedFrequencyAsPerc_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getObservedFrequencyAsPerc()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getObservedFrequencyAsPerc_result result = new getObservedFrequencyAsPerc_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getObservedFrequencyAsPerc failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getObservedCount(AsyncCallback callback, object state, string ModSite)
    {
      return send_getObservedCount(callback, state, ModSite);
    }

    public string End_getObservedCount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getObservedCount();
    }

    #endif

    public string getObservedCount(string ModSite)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getObservedCount(null, null, ModSite);
      return End_getObservedCount(asyncResult);

      #else
      send_getObservedCount(ModSite);
      return recv_getObservedCount();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getObservedCount(AsyncCallback callback, object state, string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getObservedCount", TMessageType.Call, seqid_));
      getObservedCount_args args = new getObservedCount_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getObservedCount(string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getObservedCount", TMessageType.Call, seqid_));
      getObservedCount_args args = new getObservedCount_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getObservedCount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getObservedCount_result result = new getObservedCount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getObservedCount failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getExpectedCount(AsyncCallback callback, object state, string ModSite)
    {
      return send_getExpectedCount(callback, state, ModSite);
    }

    public string End_getExpectedCount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getExpectedCount();
    }

    #endif

    public string getExpectedCount(string ModSite)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getExpectedCount(null, null, ModSite);
      return End_getExpectedCount(asyncResult);

      #else
      send_getExpectedCount(ModSite);
      return recv_getExpectedCount();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getExpectedCount(AsyncCallback callback, object state, string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getExpectedCount", TMessageType.Call, seqid_));
      getExpectedCount_args args = new getExpectedCount_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getExpectedCount(string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getExpectedCount", TMessageType.Call, seqid_));
      getExpectedCount_args args = new getExpectedCount_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getExpectedCount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getExpectedCount_result result = new getExpectedCount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getExpectedCount failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getExpectedFrequency(AsyncCallback callback, object state, string ModSite)
    {
      return send_getExpectedFrequency(callback, state, ModSite);
    }

    public string End_getExpectedFrequency(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getExpectedFrequency();
    }

    #endif

    public string getExpectedFrequency(string ModSite)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getExpectedFrequency(null, null, ModSite);
      return End_getExpectedFrequency(asyncResult);

      #else
      send_getExpectedFrequency(ModSite);
      return recv_getExpectedFrequency();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getExpectedFrequency(AsyncCallback callback, object state, string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getExpectedFrequency", TMessageType.Call, seqid_));
      getExpectedFrequency_args args = new getExpectedFrequency_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getExpectedFrequency(string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getExpectedFrequency", TMessageType.Call, seqid_));
      getExpectedFrequency_args args = new getExpectedFrequency_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getExpectedFrequency()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getExpectedFrequency_result result = new getExpectedFrequency_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getExpectedFrequency failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getExpectedFrequencyAsPerc(AsyncCallback callback, object state, string ModSite)
    {
      return send_getExpectedFrequencyAsPerc(callback, state, ModSite);
    }

    public string End_getExpectedFrequencyAsPerc(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getExpectedFrequencyAsPerc();
    }

    #endif

    public string getExpectedFrequencyAsPerc(string ModSite)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getExpectedFrequencyAsPerc(null, null, ModSite);
      return End_getExpectedFrequencyAsPerc(asyncResult);

      #else
      send_getExpectedFrequencyAsPerc(ModSite);
      return recv_getExpectedFrequencyAsPerc();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getExpectedFrequencyAsPerc(AsyncCallback callback, object state, string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getExpectedFrequencyAsPerc", TMessageType.Call, seqid_));
      getExpectedFrequencyAsPerc_args args = new getExpectedFrequencyAsPerc_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getExpectedFrequencyAsPerc(string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getExpectedFrequencyAsPerc", TMessageType.Call, seqid_));
      getExpectedFrequencyAsPerc_args args = new getExpectedFrequencyAsPerc_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getExpectedFrequencyAsPerc()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getExpectedFrequencyAsPerc_result result = new getExpectedFrequencyAsPerc_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getExpectedFrequencyAsPerc failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getDOEC(AsyncCallback callback, object state, string ModSite)
    {
      return send_getDOEC(callback, state, ModSite);
    }

    public string End_getDOEC(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getDOEC();
    }

    #endif

    public string getDOEC(string ModSite)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getDOEC(null, null, ModSite);
      return End_getDOEC(asyncResult);

      #else
      send_getDOEC(ModSite);
      return recv_getDOEC();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getDOEC(AsyncCallback callback, object state, string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getDOEC", TMessageType.Call, seqid_));
      getDOEC_args args = new getDOEC_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getDOEC(string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getDOEC", TMessageType.Call, seqid_));
      getDOEC_args args = new getDOEC_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getDOEC()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getDOEC_result result = new getDOEC_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDOEC failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSigma(AsyncCallback callback, object state, string ModSite)
    {
      return send_getSigma(callback, state, ModSite);
    }

    public string End_getSigma(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSigma();
    }

    #endif

    public string getSigma(string ModSite)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSigma(null, null, ModSite);
      return End_getSigma(asyncResult);

      #else
      send_getSigma(ModSite);
      return recv_getSigma();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSigma(AsyncCallback callback, object state, string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getSigma", TMessageType.Call, seqid_));
      getSigma_args args = new getSigma_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSigma(string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getSigma", TMessageType.Call, seqid_));
      getSigma_args args = new getSigma_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getSigma()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSigma_result result = new getSigma_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSigma failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getDeviationParameter(AsyncCallback callback, object state, string ModSite)
    {
      return send_getDeviationParameter(callback, state, ModSite);
    }

    public string End_getDeviationParameter(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getDeviationParameter();
    }

    #endif

    public string getDeviationParameter(string ModSite)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getDeviationParameter(null, null, ModSite);
      return End_getDeviationParameter(asyncResult);

      #else
      send_getDeviationParameter(ModSite);
      return recv_getDeviationParameter();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getDeviationParameter(AsyncCallback callback, object state, string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getDeviationParameter", TMessageType.Call, seqid_));
      getDeviationParameter_args args = new getDeviationParameter_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getDeviationParameter(string ModSite)
    {
      oprot_.WriteMessageBegin(new TMessage("getDeviationParameter", TMessageType.Call, seqid_));
      getDeviationParameter_args args = new getDeviationParameter_args();
      args.ModSite = ModSite;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getDeviationParameter()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getDeviationParameter_result result = new getDeviationParameter_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDeviationParameter failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPreferredSitesMatrix(AsyncCallback callback, object state)
    {
      return send_getPreferredSitesMatrix(callback, state);
    }

    public List<string> End_getPreferredSitesMatrix(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPreferredSitesMatrix();
    }

    #endif

    public List<string> getPreferredSitesMatrix()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPreferredSitesMatrix(null, null);
      return End_getPreferredSitesMatrix(asyncResult);

      #else
      send_getPreferredSitesMatrix();
      return recv_getPreferredSitesMatrix();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPreferredSitesMatrix(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getPreferredSitesMatrix", TMessageType.Call, seqid_));
      getPreferredSitesMatrix_args args = new getPreferredSitesMatrix_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPreferredSitesMatrix()
    {
      oprot_.WriteMessageBegin(new TMessage("getPreferredSitesMatrix", TMessageType.Call, seqid_));
      getPreferredSitesMatrix_args args = new getPreferredSitesMatrix_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getPreferredSitesMatrix()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPreferredSitesMatrix_result result = new getPreferredSitesMatrix_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPreferredSitesMatrix failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSignificantlyPreferredSitesMatrix(AsyncCallback callback, object state)
    {
      return send_getSignificantlyPreferredSitesMatrix(callback, state);
    }

    public List<string> End_getSignificantlyPreferredSitesMatrix(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSignificantlyPreferredSitesMatrix();
    }

    #endif

    public List<string> getSignificantlyPreferredSitesMatrix()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSignificantlyPreferredSitesMatrix(null, null);
      return End_getSignificantlyPreferredSitesMatrix(asyncResult);

      #else
      send_getSignificantlyPreferredSitesMatrix();
      return recv_getSignificantlyPreferredSitesMatrix();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSignificantlyPreferredSitesMatrix(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getSignificantlyPreferredSitesMatrix", TMessageType.Call, seqid_));
      getSignificantlyPreferredSitesMatrix_args args = new getSignificantlyPreferredSitesMatrix_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSignificantlyPreferredSitesMatrix()
    {
      oprot_.WriteMessageBegin(new TMessage("getSignificantlyPreferredSitesMatrix", TMessageType.Call, seqid_));
      getSignificantlyPreferredSitesMatrix_args args = new getSignificantlyPreferredSitesMatrix_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getSignificantlyPreferredSitesMatrix()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSignificantlyPreferredSitesMatrix_result result = new getSignificantlyPreferredSitesMatrix_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSignificantlyPreferredSitesMatrix failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSignificantlyPreferredSites_Positive_Negative_Both(AsyncCallback callback, object state)
    {
      return send_getSignificantlyPreferredSites_Positive_Negative_Both(callback, state);
    }

    public List<string> End_getSignificantlyPreferredSites_Positive_Negative_Both(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSignificantlyPreferredSites_Positive_Negative_Both();
    }

    #endif

    public List<string> getSignificantlyPreferredSites_Positive_Negative_Both()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSignificantlyPreferredSites_Positive_Negative_Both(null, null);
      return End_getSignificantlyPreferredSites_Positive_Negative_Both(asyncResult);

      #else
      send_getSignificantlyPreferredSites_Positive_Negative_Both();
      return recv_getSignificantlyPreferredSites_Positive_Negative_Both();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSignificantlyPreferredSites_Positive_Negative_Both(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getSignificantlyPreferredSites_Positive_Negative_Both", TMessageType.Call, seqid_));
      getSignificantlyPreferredSites_Positive_Negative_Both_args args = new getSignificantlyPreferredSites_Positive_Negative_Both_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSignificantlyPreferredSites_Positive_Negative_Both()
    {
      oprot_.WriteMessageBegin(new TMessage("getSignificantlyPreferredSites_Positive_Negative_Both", TMessageType.Call, seqid_));
      getSignificantlyPreferredSites_Positive_Negative_Both_args args = new getSignificantlyPreferredSites_Positive_Negative_Both_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getSignificantlyPreferredSites_Positive_Negative_Both()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSignificantlyPreferredSites_Positive_Negative_Both_result result = new getSignificantlyPreferredSites_Positive_Negative_Both_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSignificantlyPreferredSites_Positive_Negative_Both failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getAminoAcidsandPreferredPositions(AsyncCallback callback, object state)
    {
      return send_getAminoAcidsandPreferredPositions(callback, state);
    }

    public List<string> End_getAminoAcidsandPreferredPositions(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAminoAcidsandPreferredPositions();
    }

    #endif

    public List<string> getAminoAcidsandPreferredPositions()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getAminoAcidsandPreferredPositions(null, null);
      return End_getAminoAcidsandPreferredPositions(asyncResult);

      #else
      send_getAminoAcidsandPreferredPositions();
      return recv_getAminoAcidsandPreferredPositions();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAminoAcidsandPreferredPositions(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getAminoAcidsandPreferredPositions", TMessageType.Call, seqid_));
      getAminoAcidsandPreferredPositions_args args = new getAminoAcidsandPreferredPositions_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getAminoAcidsandPreferredPositions()
    {
      oprot_.WriteMessageBegin(new TMessage("getAminoAcidsandPreferredPositions", TMessageType.Call, seqid_));
      getAminoAcidsandPreferredPositions_args args = new getAminoAcidsandPreferredPositions_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getAminoAcidsandPreferredPositions()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAminoAcidsandPreferredPositions_result result = new getAminoAcidsandPreferredPositions_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAminoAcidsandPreferredPositions failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getAssociationRules(AsyncCallback callback, object state)
    {
      return send_getAssociationRules(callback, state);
    }

    public List<string> End_getAssociationRules(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAssociationRules();
    }

    #endif

    public List<string> getAssociationRules()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getAssociationRules(null, null);
      return End_getAssociationRules(asyncResult);

      #else
      send_getAssociationRules();
      return recv_getAssociationRules();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAssociationRules(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getAssociationRules", TMessageType.Call, seqid_));
      getAssociationRules_args args = new getAssociationRules_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getAssociationRules()
    {
      oprot_.WriteMessageBegin(new TMessage("getAssociationRules", TMessageType.Call, seqid_));
      getAssociationRules_args args = new getAssociationRules_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getAssociationRules()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAssociationRules_result result = new getAssociationRules_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAssociationRules failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["setProjectProfileWithStandardAminoAcids"] = setProjectProfileWithStandardAminoAcids_Process;
      processMap_["setProjectProfileWithPseudoAminoAcids"] = setProjectProfileWithPseudoAminoAcids_Process;
      processMap_["SaveProject"] = SaveProject_Process;
      processMap_["openProjectLocation"] = openProjectLocation_Process;
      processMap_["runPreferenceEstimationProcess"] = runPreferenceEstimationProcess_Process;
      processMap_["runAssociationRuleMiningProcess"] = runAssociationRuleMiningProcess_Process;
      processMap_["getPrimaryDataset"] = getPrimaryDataset_Process;
      processMap_["getProteinsDataset"] = getProteinsDataset_Process;
      processMap_["getPeptidesDataset"] = getPeptidesDataset_Process;
      processMap_["getSitesDataset"] = getSitesDataset_Process;
      processMap_["getObservedFrequency"] = getObservedFrequency_Process;
      processMap_["getObservedFrequencyAsPerc"] = getObservedFrequencyAsPerc_Process;
      processMap_["getObservedCount"] = getObservedCount_Process;
      processMap_["getExpectedCount"] = getExpectedCount_Process;
      processMap_["getExpectedFrequency"] = getExpectedFrequency_Process;
      processMap_["getExpectedFrequencyAsPerc"] = getExpectedFrequencyAsPerc_Process;
      processMap_["getDOEC"] = getDOEC_Process;
      processMap_["getSigma"] = getSigma_Process;
      processMap_["getDeviationParameter"] = getDeviationParameter_Process;
      processMap_["getPreferredSitesMatrix"] = getPreferredSitesMatrix_Process;
      processMap_["getSignificantlyPreferredSitesMatrix"] = getSignificantlyPreferredSitesMatrix_Process;
      processMap_["getSignificantlyPreferredSites_Positive_Negative_Both"] = getSignificantlyPreferredSites_Positive_Negative_Both_Process;
      processMap_["getAminoAcidsandPreferredPositions"] = getAminoAcidsandPreferredPositions_Process;
      processMap_["getAssociationRules"] = getAssociationRules_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void setProjectProfileWithStandardAminoAcids_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setProjectProfileWithStandardAminoAcids_args args = new setProjectProfileWithStandardAminoAcids_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setProjectProfileWithStandardAminoAcids_result result = new setProjectProfileWithStandardAminoAcids_result();
      try
      {
        iface_.setProjectProfileWithStandardAminoAcids(args.AnalysisTitle, args.AnalystName, args.PeptideWindowSize, args.ModificationSites, args.Path);
        oprot.WriteMessageBegin(new TMessage("setProjectProfileWithStandardAminoAcids", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setProjectProfileWithStandardAminoAcids", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setProjectProfileWithPseudoAminoAcids_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setProjectProfileWithPseudoAminoAcids_args args = new setProjectProfileWithPseudoAminoAcids_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setProjectProfileWithPseudoAminoAcids_result result = new setProjectProfileWithPseudoAminoAcids_result();
      try
      {
        iface_.setProjectProfileWithPseudoAminoAcids(args.AnalysisTitle, args.AnalystName, args.PeptideWindowSize, args.ModificationSites, args.ListOfPseudoAminoAcids, args.Path);
        oprot.WriteMessageBegin(new TMessage("setProjectProfileWithPseudoAminoAcids", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setProjectProfileWithPseudoAminoAcids", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void SaveProject_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      SaveProject_args args = new SaveProject_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      SaveProject_result result = new SaveProject_result();
      try
      {
        iface_.SaveProject();
        oprot.WriteMessageBegin(new TMessage("SaveProject", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("SaveProject", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void openProjectLocation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      openProjectLocation_args args = new openProjectLocation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      openProjectLocation_result result = new openProjectLocation_result();
      try
      {
        iface_.openProjectLocation(args.Location);
        oprot.WriteMessageBegin(new TMessage("openProjectLocation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("openProjectLocation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void runPreferenceEstimationProcess_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      runPreferenceEstimationProcess_args args = new runPreferenceEstimationProcess_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      runPreferenceEstimationProcess_result result = new runPreferenceEstimationProcess_result();
      try
      {
        iface_.runPreferenceEstimationProcess();
        oprot.WriteMessageBegin(new TMessage("runPreferenceEstimationProcess", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("runPreferenceEstimationProcess", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void runAssociationRuleMiningProcess_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      runAssociationRuleMiningProcess_args args = new runAssociationRuleMiningProcess_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      runAssociationRuleMiningProcess_result result = new runAssociationRuleMiningProcess_result();
      try
      {
        iface_.runAssociationRuleMiningProcess();
        oprot.WriteMessageBegin(new TMessage("runAssociationRuleMiningProcess", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("runAssociationRuleMiningProcess", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPrimaryDataset_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPrimaryDataset_args args = new getPrimaryDataset_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPrimaryDataset_result result = new getPrimaryDataset_result();
      try
      {
        result.Success = iface_.getPrimaryDataset();
        oprot.WriteMessageBegin(new TMessage("getPrimaryDataset", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPrimaryDataset", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getProteinsDataset_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getProteinsDataset_args args = new getProteinsDataset_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getProteinsDataset_result result = new getProteinsDataset_result();
      try
      {
        result.Success = iface_.getProteinsDataset();
        oprot.WriteMessageBegin(new TMessage("getProteinsDataset", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getProteinsDataset", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPeptidesDataset_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPeptidesDataset_args args = new getPeptidesDataset_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPeptidesDataset_result result = new getPeptidesDataset_result();
      try
      {
        result.Success = iface_.getPeptidesDataset();
        oprot.WriteMessageBegin(new TMessage("getPeptidesDataset", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPeptidesDataset", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSitesDataset_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSitesDataset_args args = new getSitesDataset_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSitesDataset_result result = new getSitesDataset_result();
      try
      {
        result.Success = iface_.getSitesDataset();
        oprot.WriteMessageBegin(new TMessage("getSitesDataset", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSitesDataset", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getObservedFrequency_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getObservedFrequency_args args = new getObservedFrequency_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getObservedFrequency_result result = new getObservedFrequency_result();
      try
      {
        result.Success = iface_.getObservedFrequency(args.ModSite);
        oprot.WriteMessageBegin(new TMessage("getObservedFrequency", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getObservedFrequency", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getObservedFrequencyAsPerc_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getObservedFrequencyAsPerc_args args = new getObservedFrequencyAsPerc_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getObservedFrequencyAsPerc_result result = new getObservedFrequencyAsPerc_result();
      try
      {
        result.Success = iface_.getObservedFrequencyAsPerc(args.ModSite);
        oprot.WriteMessageBegin(new TMessage("getObservedFrequencyAsPerc", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getObservedFrequencyAsPerc", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getObservedCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getObservedCount_args args = new getObservedCount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getObservedCount_result result = new getObservedCount_result();
      try
      {
        result.Success = iface_.getObservedCount(args.ModSite);
        oprot.WriteMessageBegin(new TMessage("getObservedCount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getObservedCount", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getExpectedCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getExpectedCount_args args = new getExpectedCount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getExpectedCount_result result = new getExpectedCount_result();
      try
      {
        result.Success = iface_.getExpectedCount(args.ModSite);
        oprot.WriteMessageBegin(new TMessage("getExpectedCount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getExpectedCount", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getExpectedFrequency_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getExpectedFrequency_args args = new getExpectedFrequency_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getExpectedFrequency_result result = new getExpectedFrequency_result();
      try
      {
        result.Success = iface_.getExpectedFrequency(args.ModSite);
        oprot.WriteMessageBegin(new TMessage("getExpectedFrequency", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getExpectedFrequency", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getExpectedFrequencyAsPerc_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getExpectedFrequencyAsPerc_args args = new getExpectedFrequencyAsPerc_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getExpectedFrequencyAsPerc_result result = new getExpectedFrequencyAsPerc_result();
      try
      {
        result.Success = iface_.getExpectedFrequencyAsPerc(args.ModSite);
        oprot.WriteMessageBegin(new TMessage("getExpectedFrequencyAsPerc", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getExpectedFrequencyAsPerc", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getDOEC_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDOEC_args args = new getDOEC_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDOEC_result result = new getDOEC_result();
      try
      {
        result.Success = iface_.getDOEC(args.ModSite);
        oprot.WriteMessageBegin(new TMessage("getDOEC", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDOEC", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSigma_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSigma_args args = new getSigma_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSigma_result result = new getSigma_result();
      try
      {
        result.Success = iface_.getSigma(args.ModSite);
        oprot.WriteMessageBegin(new TMessage("getSigma", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSigma", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getDeviationParameter_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDeviationParameter_args args = new getDeviationParameter_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDeviationParameter_result result = new getDeviationParameter_result();
      try
      {
        result.Success = iface_.getDeviationParameter(args.ModSite);
        oprot.WriteMessageBegin(new TMessage("getDeviationParameter", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDeviationParameter", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPreferredSitesMatrix_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPreferredSitesMatrix_args args = new getPreferredSitesMatrix_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPreferredSitesMatrix_result result = new getPreferredSitesMatrix_result();
      try
      {
        result.Success = iface_.getPreferredSitesMatrix();
        oprot.WriteMessageBegin(new TMessage("getPreferredSitesMatrix", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPreferredSitesMatrix", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSignificantlyPreferredSitesMatrix_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSignificantlyPreferredSitesMatrix_args args = new getSignificantlyPreferredSitesMatrix_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSignificantlyPreferredSitesMatrix_result result = new getSignificantlyPreferredSitesMatrix_result();
      try
      {
        result.Success = iface_.getSignificantlyPreferredSitesMatrix();
        oprot.WriteMessageBegin(new TMessage("getSignificantlyPreferredSitesMatrix", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSignificantlyPreferredSitesMatrix", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSignificantlyPreferredSites_Positive_Negative_Both_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSignificantlyPreferredSites_Positive_Negative_Both_args args = new getSignificantlyPreferredSites_Positive_Negative_Both_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSignificantlyPreferredSites_Positive_Negative_Both_result result = new getSignificantlyPreferredSites_Positive_Negative_Both_result();
      try
      {
        result.Success = iface_.getSignificantlyPreferredSites_Positive_Negative_Both();
        oprot.WriteMessageBegin(new TMessage("getSignificantlyPreferredSites_Positive_Negative_Both", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSignificantlyPreferredSites_Positive_Negative_Both", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAminoAcidsandPreferredPositions_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAminoAcidsandPreferredPositions_args args = new getAminoAcidsandPreferredPositions_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAminoAcidsandPreferredPositions_result result = new getAminoAcidsandPreferredPositions_result();
      try
      {
        result.Success = iface_.getAminoAcidsandPreferredPositions();
        oprot.WriteMessageBegin(new TMessage("getAminoAcidsandPreferredPositions", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAminoAcidsandPreferredPositions", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAssociationRules_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAssociationRules_args args = new getAssociationRules_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAssociationRules_result result = new getAssociationRules_result();
      try
      {
        result.Success = iface_.getAssociationRules();
        oprot.WriteMessageBegin(new TMessage("getAssociationRules", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAssociationRules", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setProjectProfileWithStandardAminoAcids_args : TBase
  {
    private string _AnalysisTitle;
    private string _AnalystName;
    private int _PeptideWindowSize;
    private THashSet<string> _ModificationSites;
    private string _path;

    public string AnalysisTitle
    {
      get
      {
        return _AnalysisTitle;
      }
      set
      {
        __isset.AnalysisTitle = true;
        this._AnalysisTitle = value;
      }
    }

    public string AnalystName
    {
      get
      {
        return _AnalystName;
      }
      set
      {
        __isset.AnalystName = true;
        this._AnalystName = value;
      }
    }

    public int PeptideWindowSize
    {
      get
      {
        return _PeptideWindowSize;
      }
      set
      {
        __isset.PeptideWindowSize = true;
        this._PeptideWindowSize = value;
      }
    }

    public THashSet<string> ModificationSites
    {
      get
      {
        return _ModificationSites;
      }
      set
      {
        __isset.ModificationSites = true;
        this._ModificationSites = value;
      }
    }

    public string Path
    {
      get
      {
        return _path;
      }
      set
      {
        __isset.path = true;
        this._path = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool AnalysisTitle;
      public bool AnalystName;
      public bool PeptideWindowSize;
      public bool ModificationSites;
      public bool path;
    }

    public setProjectProfileWithStandardAminoAcids_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AnalysisTitle = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                AnalystName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PeptideWindowSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Set) {
                {
                  ModificationSites = new THashSet<string>();
                  TSet _set0 = iprot.ReadSetBegin();
                  for( int _i1 = 0; _i1 < _set0.Count; ++_i1)
                  {
                    string _elem2;
                    _elem2 = iprot.ReadString();
                    ModificationSites.Add(_elem2);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setProjectProfileWithStandardAminoAcids_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AnalysisTitle != null && __isset.AnalysisTitle) {
          field.Name = "AnalysisTitle";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AnalysisTitle);
          oprot.WriteFieldEnd();
        }
        if (AnalystName != null && __isset.AnalystName) {
          field.Name = "AnalystName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AnalystName);
          oprot.WriteFieldEnd();
        }
        if (__isset.PeptideWindowSize) {
          field.Name = "PeptideWindowSize";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PeptideWindowSize);
          oprot.WriteFieldEnd();
        }
        if (ModificationSites != null && __isset.ModificationSites) {
          field.Name = "ModificationSites";
          field.Type = TType.Set;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, ModificationSites.Count));
            foreach (string _iter3 in ModificationSites)
            {
              oprot.WriteString(_iter3);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setProjectProfileWithStandardAminoAcids_args(");
      bool __first = true;
      if (AnalysisTitle != null && __isset.AnalysisTitle) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AnalysisTitle: ");
        __sb.Append(AnalysisTitle);
      }
      if (AnalystName != null && __isset.AnalystName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AnalystName: ");
        __sb.Append(AnalystName);
      }
      if (__isset.PeptideWindowSize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PeptideWindowSize: ");
        __sb.Append(PeptideWindowSize);
      }
      if (ModificationSites != null && __isset.ModificationSites) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModificationSites: ");
        __sb.Append(ModificationSites);
      }
      if (Path != null && __isset.path) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Path: ");
        __sb.Append(Path);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setProjectProfileWithStandardAminoAcids_result : TBase
  {

    public setProjectProfileWithStandardAminoAcids_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setProjectProfileWithStandardAminoAcids_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setProjectProfileWithStandardAminoAcids_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setProjectProfileWithPseudoAminoAcids_args : TBase
  {
    private string _AnalysisTitle;
    private string _AnalystName;
    private int _PeptideWindowSize;
    private THashSet<string> _ModificationSites;
    private THashSet<string> _ListOfPseudoAminoAcids;
    private string _path;

    public string AnalysisTitle
    {
      get
      {
        return _AnalysisTitle;
      }
      set
      {
        __isset.AnalysisTitle = true;
        this._AnalysisTitle = value;
      }
    }

    public string AnalystName
    {
      get
      {
        return _AnalystName;
      }
      set
      {
        __isset.AnalystName = true;
        this._AnalystName = value;
      }
    }

    public int PeptideWindowSize
    {
      get
      {
        return _PeptideWindowSize;
      }
      set
      {
        __isset.PeptideWindowSize = true;
        this._PeptideWindowSize = value;
      }
    }

    public THashSet<string> ModificationSites
    {
      get
      {
        return _ModificationSites;
      }
      set
      {
        __isset.ModificationSites = true;
        this._ModificationSites = value;
      }
    }

    public THashSet<string> ListOfPseudoAminoAcids
    {
      get
      {
        return _ListOfPseudoAminoAcids;
      }
      set
      {
        __isset.ListOfPseudoAminoAcids = true;
        this._ListOfPseudoAminoAcids = value;
      }
    }

    public string Path
    {
      get
      {
        return _path;
      }
      set
      {
        __isset.path = true;
        this._path = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool AnalysisTitle;
      public bool AnalystName;
      public bool PeptideWindowSize;
      public bool ModificationSites;
      public bool ListOfPseudoAminoAcids;
      public bool path;
    }

    public setProjectProfileWithPseudoAminoAcids_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AnalysisTitle = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                AnalystName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PeptideWindowSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Set) {
                {
                  ModificationSites = new THashSet<string>();
                  TSet _set4 = iprot.ReadSetBegin();
                  for( int _i5 = 0; _i5 < _set4.Count; ++_i5)
                  {
                    string _elem6;
                    _elem6 = iprot.ReadString();
                    ModificationSites.Add(_elem6);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Set) {
                {
                  ListOfPseudoAminoAcids = new THashSet<string>();
                  TSet _set7 = iprot.ReadSetBegin();
                  for( int _i8 = 0; _i8 < _set7.Count; ++_i8)
                  {
                    string _elem9;
                    _elem9 = iprot.ReadString();
                    ListOfPseudoAminoAcids.Add(_elem9);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setProjectProfileWithPseudoAminoAcids_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AnalysisTitle != null && __isset.AnalysisTitle) {
          field.Name = "AnalysisTitle";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AnalysisTitle);
          oprot.WriteFieldEnd();
        }
        if (AnalystName != null && __isset.AnalystName) {
          field.Name = "AnalystName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AnalystName);
          oprot.WriteFieldEnd();
        }
        if (__isset.PeptideWindowSize) {
          field.Name = "PeptideWindowSize";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PeptideWindowSize);
          oprot.WriteFieldEnd();
        }
        if (ModificationSites != null && __isset.ModificationSites) {
          field.Name = "ModificationSites";
          field.Type = TType.Set;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, ModificationSites.Count));
            foreach (string _iter10 in ModificationSites)
            {
              oprot.WriteString(_iter10);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ListOfPseudoAminoAcids != null && __isset.ListOfPseudoAminoAcids) {
          field.Name = "ListOfPseudoAminoAcids";
          field.Type = TType.Set;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, ListOfPseudoAminoAcids.Count));
            foreach (string _iter11 in ListOfPseudoAminoAcids)
            {
              oprot.WriteString(_iter11);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setProjectProfileWithPseudoAminoAcids_args(");
      bool __first = true;
      if (AnalysisTitle != null && __isset.AnalysisTitle) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AnalysisTitle: ");
        __sb.Append(AnalysisTitle);
      }
      if (AnalystName != null && __isset.AnalystName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AnalystName: ");
        __sb.Append(AnalystName);
      }
      if (__isset.PeptideWindowSize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PeptideWindowSize: ");
        __sb.Append(PeptideWindowSize);
      }
      if (ModificationSites != null && __isset.ModificationSites) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModificationSites: ");
        __sb.Append(ModificationSites);
      }
      if (ListOfPseudoAminoAcids != null && __isset.ListOfPseudoAminoAcids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ListOfPseudoAminoAcids: ");
        __sb.Append(ListOfPseudoAminoAcids);
      }
      if (Path != null && __isset.path) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Path: ");
        __sb.Append(Path);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setProjectProfileWithPseudoAminoAcids_result : TBase
  {

    public setProjectProfileWithPseudoAminoAcids_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setProjectProfileWithPseudoAminoAcids_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setProjectProfileWithPseudoAminoAcids_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SaveProject_args : TBase
  {

    public SaveProject_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SaveProject_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SaveProject_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SaveProject_result : TBase
  {

    public SaveProject_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SaveProject_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SaveProject_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class openProjectLocation_args : TBase
  {
    private string _location;

    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool location;
    }

    public openProjectLocation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Location = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("openProjectLocation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Location != null && __isset.location) {
          field.Name = "location";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Location);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("openProjectLocation_args(");
      bool __first = true;
      if (Location != null && __isset.location) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Location: ");
        __sb.Append(Location);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class openProjectLocation_result : TBase
  {

    public openProjectLocation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("openProjectLocation_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("openProjectLocation_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class runPreferenceEstimationProcess_args : TBase
  {

    public runPreferenceEstimationProcess_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("runPreferenceEstimationProcess_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("runPreferenceEstimationProcess_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class runPreferenceEstimationProcess_result : TBase
  {

    public runPreferenceEstimationProcess_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("runPreferenceEstimationProcess_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("runPreferenceEstimationProcess_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class runAssociationRuleMiningProcess_args : TBase
  {

    public runAssociationRuleMiningProcess_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("runAssociationRuleMiningProcess_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("runAssociationRuleMiningProcess_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class runAssociationRuleMiningProcess_result : TBase
  {

    public runAssociationRuleMiningProcess_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("runAssociationRuleMiningProcess_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("runAssociationRuleMiningProcess_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPrimaryDataset_args : TBase
  {

    public getPrimaryDataset_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPrimaryDataset_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPrimaryDataset_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPrimaryDataset_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getPrimaryDataset_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    string _elem14;
                    _elem14 = iprot.ReadString();
                    Success.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPrimaryDataset_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter15 in Success)
              {
                oprot.WriteString(_iter15);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPrimaryDataset_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProteinsDataset_args : TBase
  {

    public getProteinsDataset_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProteinsDataset_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProteinsDataset_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProteinsDataset_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getProteinsDataset_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list16 = iprot.ReadListBegin();
                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    string _elem18;
                    _elem18 = iprot.ReadString();
                    Success.Add(_elem18);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProteinsDataset_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter19 in Success)
              {
                oprot.WriteString(_iter19);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProteinsDataset_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPeptidesDataset_args : TBase
  {

    public getPeptidesDataset_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPeptidesDataset_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPeptidesDataset_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPeptidesDataset_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getPeptidesDataset_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list20 = iprot.ReadListBegin();
                  for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                  {
                    string _elem22;
                    _elem22 = iprot.ReadString();
                    Success.Add(_elem22);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPeptidesDataset_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter23 in Success)
              {
                oprot.WriteString(_iter23);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPeptidesDataset_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSitesDataset_args : TBase
  {

    public getSitesDataset_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSitesDataset_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSitesDataset_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSitesDataset_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getSitesDataset_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list24 = iprot.ReadListBegin();
                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    string _elem26;
                    _elem26 = iprot.ReadString();
                    Success.Add(_elem26);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSitesDataset_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter27 in Success)
              {
                oprot.WriteString(_iter27);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSitesDataset_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getObservedFrequency_args : TBase
  {
    private string _ModSite;

    public string ModSite
    {
      get
      {
        return _ModSite;
      }
      set
      {
        __isset.ModSite = true;
        this._ModSite = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ModSite;
    }

    public getObservedFrequency_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ModSite = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getObservedFrequency_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ModSite != null && __isset.ModSite) {
          field.Name = "ModSite";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ModSite);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getObservedFrequency_args(");
      bool __first = true;
      if (ModSite != null && __isset.ModSite) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModSite: ");
        __sb.Append(ModSite);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getObservedFrequency_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getObservedFrequency_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getObservedFrequency_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getObservedFrequency_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getObservedFrequencyAsPerc_args : TBase
  {
    private string _ModSite;

    public string ModSite
    {
      get
      {
        return _ModSite;
      }
      set
      {
        __isset.ModSite = true;
        this._ModSite = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ModSite;
    }

    public getObservedFrequencyAsPerc_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ModSite = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getObservedFrequencyAsPerc_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ModSite != null && __isset.ModSite) {
          field.Name = "ModSite";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ModSite);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getObservedFrequencyAsPerc_args(");
      bool __first = true;
      if (ModSite != null && __isset.ModSite) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModSite: ");
        __sb.Append(ModSite);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getObservedFrequencyAsPerc_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getObservedFrequencyAsPerc_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getObservedFrequencyAsPerc_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getObservedFrequencyAsPerc_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getObservedCount_args : TBase
  {
    private string _ModSite;

    public string ModSite
    {
      get
      {
        return _ModSite;
      }
      set
      {
        __isset.ModSite = true;
        this._ModSite = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ModSite;
    }

    public getObservedCount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ModSite = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getObservedCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ModSite != null && __isset.ModSite) {
          field.Name = "ModSite";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ModSite);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getObservedCount_args(");
      bool __first = true;
      if (ModSite != null && __isset.ModSite) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModSite: ");
        __sb.Append(ModSite);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getObservedCount_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getObservedCount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getObservedCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getObservedCount_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getExpectedCount_args : TBase
  {
    private string _ModSite;

    public string ModSite
    {
      get
      {
        return _ModSite;
      }
      set
      {
        __isset.ModSite = true;
        this._ModSite = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ModSite;
    }

    public getExpectedCount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ModSite = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getExpectedCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ModSite != null && __isset.ModSite) {
          field.Name = "ModSite";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ModSite);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getExpectedCount_args(");
      bool __first = true;
      if (ModSite != null && __isset.ModSite) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModSite: ");
        __sb.Append(ModSite);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getExpectedCount_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getExpectedCount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getExpectedCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getExpectedCount_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getExpectedFrequency_args : TBase
  {
    private string _ModSite;

    public string ModSite
    {
      get
      {
        return _ModSite;
      }
      set
      {
        __isset.ModSite = true;
        this._ModSite = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ModSite;
    }

    public getExpectedFrequency_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ModSite = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getExpectedFrequency_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ModSite != null && __isset.ModSite) {
          field.Name = "ModSite";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ModSite);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getExpectedFrequency_args(");
      bool __first = true;
      if (ModSite != null && __isset.ModSite) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModSite: ");
        __sb.Append(ModSite);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getExpectedFrequency_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getExpectedFrequency_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getExpectedFrequency_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getExpectedFrequency_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getExpectedFrequencyAsPerc_args : TBase
  {
    private string _ModSite;

    public string ModSite
    {
      get
      {
        return _ModSite;
      }
      set
      {
        __isset.ModSite = true;
        this._ModSite = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ModSite;
    }

    public getExpectedFrequencyAsPerc_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ModSite = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getExpectedFrequencyAsPerc_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ModSite != null && __isset.ModSite) {
          field.Name = "ModSite";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ModSite);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getExpectedFrequencyAsPerc_args(");
      bool __first = true;
      if (ModSite != null && __isset.ModSite) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModSite: ");
        __sb.Append(ModSite);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getExpectedFrequencyAsPerc_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getExpectedFrequencyAsPerc_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getExpectedFrequencyAsPerc_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getExpectedFrequencyAsPerc_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDOEC_args : TBase
  {
    private string _ModSite;

    public string ModSite
    {
      get
      {
        return _ModSite;
      }
      set
      {
        __isset.ModSite = true;
        this._ModSite = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ModSite;
    }

    public getDOEC_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ModSite = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDOEC_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ModSite != null && __isset.ModSite) {
          field.Name = "ModSite";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ModSite);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDOEC_args(");
      bool __first = true;
      if (ModSite != null && __isset.ModSite) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModSite: ");
        __sb.Append(ModSite);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDOEC_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getDOEC_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDOEC_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDOEC_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSigma_args : TBase
  {
    private string _ModSite;

    public string ModSite
    {
      get
      {
        return _ModSite;
      }
      set
      {
        __isset.ModSite = true;
        this._ModSite = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ModSite;
    }

    public getSigma_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ModSite = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSigma_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ModSite != null && __isset.ModSite) {
          field.Name = "ModSite";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ModSite);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSigma_args(");
      bool __first = true;
      if (ModSite != null && __isset.ModSite) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModSite: ");
        __sb.Append(ModSite);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSigma_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getSigma_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSigma_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSigma_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDeviationParameter_args : TBase
  {
    private string _ModSite;

    public string ModSite
    {
      get
      {
        return _ModSite;
      }
      set
      {
        __isset.ModSite = true;
        this._ModSite = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ModSite;
    }

    public getDeviationParameter_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ModSite = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDeviationParameter_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ModSite != null && __isset.ModSite) {
          field.Name = "ModSite";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ModSite);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDeviationParameter_args(");
      bool __first = true;
      if (ModSite != null && __isset.ModSite) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModSite: ");
        __sb.Append(ModSite);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDeviationParameter_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getDeviationParameter_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDeviationParameter_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDeviationParameter_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPreferredSitesMatrix_args : TBase
  {

    public getPreferredSitesMatrix_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPreferredSitesMatrix_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPreferredSitesMatrix_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPreferredSitesMatrix_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getPreferredSitesMatrix_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list28 = iprot.ReadListBegin();
                  for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                  {
                    string _elem30;
                    _elem30 = iprot.ReadString();
                    Success.Add(_elem30);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPreferredSitesMatrix_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter31 in Success)
              {
                oprot.WriteString(_iter31);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPreferredSitesMatrix_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSignificantlyPreferredSitesMatrix_args : TBase
  {

    public getSignificantlyPreferredSitesMatrix_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSignificantlyPreferredSitesMatrix_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSignificantlyPreferredSitesMatrix_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSignificantlyPreferredSitesMatrix_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getSignificantlyPreferredSitesMatrix_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list32 = iprot.ReadListBegin();
                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                  {
                    string _elem34;
                    _elem34 = iprot.ReadString();
                    Success.Add(_elem34);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSignificantlyPreferredSitesMatrix_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter35 in Success)
              {
                oprot.WriteString(_iter35);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSignificantlyPreferredSitesMatrix_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSignificantlyPreferredSites_Positive_Negative_Both_args : TBase
  {

    public getSignificantlyPreferredSites_Positive_Negative_Both_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSignificantlyPreferredSites_Positive_Negative_Both_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSignificantlyPreferredSites_Positive_Negative_Both_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSignificantlyPreferredSites_Positive_Negative_Both_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getSignificantlyPreferredSites_Positive_Negative_Both_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list36 = iprot.ReadListBegin();
                  for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                  {
                    string _elem38;
                    _elem38 = iprot.ReadString();
                    Success.Add(_elem38);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSignificantlyPreferredSites_Positive_Negative_Both_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter39 in Success)
              {
                oprot.WriteString(_iter39);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSignificantlyPreferredSites_Positive_Negative_Both_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAminoAcidsandPreferredPositions_args : TBase
  {

    public getAminoAcidsandPreferredPositions_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAminoAcidsandPreferredPositions_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAminoAcidsandPreferredPositions_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAminoAcidsandPreferredPositions_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getAminoAcidsandPreferredPositions_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list40 = iprot.ReadListBegin();
                  for( int _i41 = 0; _i41 < _list40.Count; ++_i41)
                  {
                    string _elem42;
                    _elem42 = iprot.ReadString();
                    Success.Add(_elem42);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAminoAcidsandPreferredPositions_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter43 in Success)
              {
                oprot.WriteString(_iter43);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAminoAcidsandPreferredPositions_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAssociationRules_args : TBase
  {

    public getAssociationRules_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAssociationRules_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAssociationRules_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAssociationRules_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getAssociationRules_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list44 = iprot.ReadListBegin();
                  for( int _i45 = 0; _i45 < _list44.Count; ++_i45)
                  {
                    string _elem46;
                    _elem46 = iprot.ReadString();
                    Success.Add(_elem46);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAssociationRules_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter47 in Success)
              {
                oprot.WriteString(_iter47);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAssociationRules_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
}